<!-- | ğŸ§ª Exercices PHP â€“ POO : classes, getters/setters, hÃ©ritage, abstract, etc.
|--------------------------------------------------------------------------
| Ce fichier contient 10 exercices pÃ©dagogiques pour pratiquer la POO en PHP.
| Chaque exercice est clairement commentÃ© pour comprendre l'objectif.
| Ã€ exÃ©cuter et complÃ©ter en local pour s'entraÃ®ner.
*/
 
echo "<h1>ğŸ§ª Exercices PHP â€“ Programmation OrientÃ©e Objet</h1>";
 
/*
* ğŸ”¹ Exercice 1 : Classe simple + constructeur
* CrÃ©e une classe Utilisateur avec un nom et un email passÃ©s via le constructeur.
* Affiche ensuite ces informations avec une mÃ©thode afficherProfil().
*/
 
 
 
/*
* ğŸ”¹ Exercice 2 : Getters et Setters
* CrÃ©e une classe Produit avec un prix privÃ©. Ajoute des getters et setters.
* Utilise-les pour dÃ©finir un prix, puis l'afficher.
*/
 
 
 
/*
* ğŸ”¹ Exercice 3 : HÃ©ritage simple
* CrÃ©e une classe Vehicule avec une mÃ©thode rouler().
* CrÃ©e une classe Voiture qui hÃ©rite de Vehicule, et ajoute une mÃ©thode klaxonner().
* Instancie une Voiture et appelle les deux mÃ©thodes.
*/
 
 
 
/*
* ğŸ”¹ Exercice 4 : RedÃ©finir une mÃ©thode (override)
* CrÃ©e une classe Animal avec une mÃ©thode parler() qui dit "Je fais un bruit".
* CrÃ©e une classe Chat qui hÃ©rite de Animal et redÃ©finit parler() pour dire "Miaou".
*/
 
 
 
/*
* ğŸ”¹ Exercice 5 : Utiliser parent:: dans une redÃ©finition
* Dans une classe Chien qui hÃ©rite de Animal, redÃ©finis parler() :
* appelle parent::parler() puis ajoute " et j'aboie !".
*/
 
 
 
/*
* ğŸ”¹ Exercice 6 : Classe abstraite
* CrÃ©e une classe abstraite Forme avec une mÃ©thode abstraite afficherNom().
* CrÃ©e deux classes Cercle et Carre qui hÃ©ritent de Forme et implÃ©mentent afficherNom().
*/
 
 
/*
* ğŸ”¹ Exercice 7 : PropriÃ©tÃ© protÃ©gÃ©e
* CrÃ©e une classe Compte avec une propriÃ©tÃ© protÃ©gÃ©e solde.
* Ajoute une mÃ©thode deposer() dans une classe enfant CompteCourant.
* Teste le dÃ©pÃ´t et affiche le solde.
*/
 

 
/*
* ğŸ”¹ Exercice 8 : MÃ©thode
* CrÃ©e une classe Logger en `final` avec une mÃ©thode log().
* Tente de crÃ©er une classe fille qui hÃ©rite de Logger et observe le blocage.
*/
 
 
/*
* ğŸ”¹ Exercice 10 : Encapsulation complÃ¨te
* CrÃ©e une classe Banque avec des propriÃ©tÃ©s privÃ©es (nomClient, solde).
* ImplÃ©mente des getters/setters et une mÃ©thode transfert() entre deux comptes.finale
* CrÃ©e une classe Base avec une mÃ©thode finale identifiant().
* Essaie de redÃ©finir cette mÃ©thode dans une classe enfant : observe l'erreur.
*/ -->

<?php


class Banque 
{

    private string $nomClient;
    private float $solde;

    public function __construct(string $nomClient, float $solde)
    {
        $this->nomClient = $nomClient;
        $this->solde = $solde;
    }

    // getter 
    public function getNomClient() : string
    {
        return $this->nomClient;
    }

    public function getSolde() : float
    {
        return $this->solde;
    }

    public function setSolde(float $solde) : float
    {
         return $this->solde = $solde;
    }

    public function setNomClient(string $nomClient) : string
    {
        return $this->nomClient = $nomClient;
    }

 public function transfert(Banque $destinataire, float $montant) : void // ici je fait un typage d'objet Banque, je demande un objet issu de Banque 
    
    {
       if($montant > 0 && $this->solde >= $montant) {
        $this->solde -= $montant;
        $destinataire->solde += $montant;
       }else {
        echo "le solde est insuffisant";
       }
    }
    

}

$compte1= new Banque("najiba",150000);
$compte2= new Banque("facundo",2);
echo $compte2->getSolde(). "<br>";
echo $compte1->getSolde(). "<br>";
$compte1->transfert($compte2, 100000);
echo $compte2->getSolde(). "<br>";
echo $compte1->getSolde(). "<br>";

?>
 
 
<!--  
/*
* ğŸ”¹ Exercice 9 : Classe finale
* CrÃ©e une classe Logger en `final` avec une mÃ©thode log().
* Tente de crÃ©er une classe fille qui hÃ©rite de Logger et observe le blocage.
*/
 
 
 
/*
* ğŸ”¹ Exercice 10 : Encapsulation complÃ¨te
* CrÃ©e une classe Banque avec des propriÃ©tÃ©s privÃ©es (nomClient, solde).
* ImplÃ©mente des getters/setters et une mÃ©thode transfert() entre deux comptes. -->



 