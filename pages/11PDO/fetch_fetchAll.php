<?php
ini_set('display_errors', 1);
error_reporting(E_ALL);
// Connexion √† la base de donn√©es avec PDO
$dsn = 'mysql:host=localhost;dbname=ecole;charset=utf8';
$user = 'root';       // √Ä adapter
$password = 'votre_mot_de_passe';       // √Ä adapter

try {
    $pdo = new PDO($dsn, $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die('Erreur de connexion : ' . $e->getMessage());
}

/*
|---------------------------------------------------------------
| EXEMPLE 1 : R√©cup√©rer un seul √©l√®ve avec fetch() (s√©curis√©)
|---------------------------------------------------------------
| On utilise prepare() + execute() m√™me sans param√®tre.
*/

$sql = "SELECT * FROM eleves ";
$stmt = $pdo->prepare($sql);
$stmt->execute(); // M√™me sans param√®tres, on ex√©cute


$eleve = $stmt->fetch(PDO::FETCH_ASSOC);
echo "<h3>Un seul √©l√®ve (avec fetch)</h3>";
echo "ID: {$eleve['id']} - Nom: {$eleve['nom']} - PC: {$eleve['ordinateur_numero']}<br>";


echo "<h3>Liste des √©l√®ves avec fetch()</h3>";
$sql = "SELECT * FROM eleves"; 
var_dump($sql);
$stmt = $pdo->prepare($sql);
$stmt->execute();
// dans $tmt il y a une liste invisible des eleves 
// La m√©thode fetch() lit la prochaine ligne disponible dans le r√©sultat SQL.

// Chaque appel avance d‚Äôune ligne, comme un curseur
// quand on fait un fetch on recup√®re la premiere de ce resultat
// avec un deuxieme feth() on recup√®re la deuxiemme ligne du resultat : 
// exemple :
var_dump($stmt);
$ligne1 = $stmt->fetch(PDO::FETCH_ASSOC);
var_dump($ligne1); // üîπ Tu vois la premi√®re ligne

$ligne2 = $stmt->fetch(PDO::FETCH_ASSOC);
var_dump($ligne2); // üîπ Deuxi√®me ligne

$ligne3 = $stmt->fetch(PDO::FETCH_NUM);
var_dump($ligne3); // üîπ Troisi√®me ligne
$elevess = $stmt->fetch(PDO::FETCH_ASSOC);

// de cette maniere avec la boucle while on recup√®re 1 par 1 les eleves

while ($eleves = $stmt->fetch(PDO::FETCH_ASSOC)) {
    echo "ID: {$eleve['id']} - Nom: {$eleve['nom']} - PC: {$eleve['ordinateur_numero']}<br>";
}

/*
|---------------------------------------------------------------
| EXEMPLE 2 : R√©cup√©rer tous les √©l√®ves avec fetchAll()
|---------------------------------------------------------------
*/

$sqlAll = "SELECT * FROM eleves";
$stmtAll = $pdo->prepare($sqlAll);
$stmtAll->execute();

$eleves = $stmtAll->fetchAll(PDO::FETCH_NUM);
// ici nous avons recuperer tout les √©l√©ves d'un coup

echo "<h3>Liste compl√®te des √©l√®ves avec  fetchAll</h3>";
var_dump($eleves);
foreach ($eleves as $e) {
    echo "ID: {$e['id']} - Nom: {$e['nom']} - PC: {$e['ordinateur_numero']}<br>";
}
/*
|---------------------------------------------------------------
| EXEMPLE 3 : Trier par nom (ordre alphab√©tique)
|---------------------------------------------------------------
*/
echo "<h3>Noms tri√©s alphab√©tiquement</h3>";
var_dump($eleves);
$listeNoms = array_column($eleves, 'nom');
var_dump($listeNoms);
sort($listeNoms);


foreach ($listeNoms as $nom) {
    echo $nom . "<br>";
}

/*
|---------------------------------------------------------------
| EXEMPLE 4 : Filtrer les √©l√®ves avec un 'a' dans le nom
|---------------------------------------------------------------
*/

$avecA = array_filter($eleves, function($eleve) {
    return stripos($eleve['nom'], 'a') !== false;
});

echo "<h3>√âl√®ves contenant la lettre 'a'</h3>";
foreach ($avecA as $e) {
    echo "{$e['nom']} (PC: {$e['ordinateur_numero']})<br>";
}

/*
|---------------------------------------------------------------
| EXEMPLE 5 : Compter les √©l√®ves
|---------------------------------------------------------------
*/

echo "<h3>Nombre total d'√©l√®ves : " . count($eleves) . "</h3>";

/*
|---------------------------------------------------------------
| EXEMPLE 6 : Trier par num√©ro de PC
|---------------------------------------------------------------
*/

usort($eleves, function($a, $b) {
    return $a['ordinateur_numero'] <=> $b['ordinateur_numero'];
});

echo "<h3>√âl√®ves tri√©s par num√©ro de PC</h3>";
foreach ($eleves as $e) {
    echo "{$e['nom']} - PC #{$e['ordinateur_numero']}<br>";
}


/*
|---------------------------------------------------------------
| EXEMPLE 7 : Supprimer un √©l√®ve par ID (ex: supprimer l‚Äô√©l√®ve avec ID 12)
|---------------------------------------------------------------
| - On utilise exec() pour les requ√™tes qui ne retournent pas de donn√©es (INSERT, DELETE, UPDATE).
| - Ici on montre aussi prepare() + execute() pour s√©curiser contre les injections.
*/

// ID de l‚Äô√©l√®ve √† supprimer (exemple : Adam avec ID 12)
$idASupprimer = 12;

// Pr√©paration s√©curis√©e
$stmt = $pdo->prepare("DELETE FROM eleves WHERE id = :id");
$stmt->bindParam(':id', $idASupprimer, PDO::PARAM_INT);

// Ex√©cution
$stmt->execute();

if ($stmt->rowCount() > 0) {
    echo "<h3>√âl√®ve avec ID $idASupprimer supprim√© avec succ√®s.</h3>";
} else {
    echo "<h3>Aucun √©l√®ve trouv√© avec ID $idASupprimer.</h3>";
}





/*
|---------------------------------------------------------------
| EXEMPLE 8 : Exemple de formulaire de connexion avec verification du user existe dans la base de donn√©e
|---------------------------------------------------------------
| - On utilise exec() pour les requ√™tes qui ne retournent pas de donn√©es (INSERT, DELETE, UPDATE).
| - Ici on montre aussi prepare() + execute() pour s√©curiser contre les injections.
*/


//  V√©rifie si le formulaire a √©t√© soumis
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['nom_utilisateur'])) {

    // üîçNettoie la saisie
    $nomSaisi = trim($_POST['nom_utilisateur']);

    //  Pr√©paration de la requ√™te SQL
    $stmt = $pdo->prepare("SELECT * FROM eleves WHERE nom = :nom");
 
    $stmt->execute([
        ":nom"=> $nomSaisi,
    ]);

    //  R√©cup√®re un utilisateur si trouv√©
    $utilisateur = $stmt->fetch(PDO::FETCH_ASSOC);

    //  Affiche un message en fonction du r√©sultat
    if ($utilisateur) {
        echo "<h3>Bienvenue {$utilisateur['nom']} !  Connexion r√©ussie.</h3>";
    } else {
        echo "<h3> Utilisateur non trouv√©. Veuillez r√©essayer.</h3>";
    }
}
?>

<h2>Connexion utilisateur</h2>

<form method="POST">
    <label for="nom_utilisateur">Nom :</label>
    <input type="text" name="nom_utilisateur" required>
    <button type="submit">Se connecter</button>
</form>

<?php 

$sqlAll = "SELECT * FROM eleves";
$stmtAll = $pdo->prepare($sqlAll);
$stmtAll->execute();

$eleves = $stmtAll->fetchAll(PDO::FETCH_ASSOC);
var_dump($eleves);
echo "<pre>";
print_r($eleves);
echo "</pre>";
var_dump($_GET);
var_dump($_POST);

$contenu = "";

// Suppression s√©curis√©e
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST["sup"], $_POST['id'])) {
    $isUserSup = (int) $_POST['id'];

    $stmt = $pdo->prepare("DELETE FROM eleves WHERE id = :id");
    $stmt->execute([
        ":id" => $isUserSup,
    ]);

    if ($stmt->rowCount() > 0) {
        $contenu = "ID {$isUserSup} supprim√© avec succ√®s.";
    } else {
        $contenu = " Aucun √©l√®ve supprim√©. ID inexistant ?";
    }
}

// Affichage du message
if (!empty($contenu)) {
    echo "<p style='color:green;'>$contenu</p>";
}

// Affichage des √©l√®ves + formulaire de suppression
foreach ($eleves as $e) {
    echo "
    ID: {$e['id']} - Nom: {$e['nom']} - PC: {$e['ordinateur_numero']}
    <form action='fetch_fetchAll.php' method='POST' style='display:inline'>
        <input type='hidden' name='id' value='{$e['id']}'>
        <input type='submit' name='sup' value='Supprimer'>
    </form><br>";
}


//UPDATE

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['modifier'])) {
    $id = (int) $_POST['id'];
    $nouveauNom = trim($_POST['nom']);

    $stmt = $pdo->prepare("UPDATE eleves SET nom = :nom WHERE id = :id");
    $stmt->execute([
        ':nom' => $nouveauNom,
        ':id' => $id
    ]);

    // V√©rifie si l‚ÄôUPDATE a affect√© une ligne
    if ($stmt->rowCount() > 0) {
        echo "<p style='color: green;'>‚úÖ √âl√®ve ID $id mis √† jour avec succ√®s ! Nouveau nom : $nouveauNom</p>";
    } else {
        echo "<p style='color: red;'>‚ùå Aucun changement effectu√©. L‚Äô√©l√®ve existe-t-il ? Ou m√™me nom ?</p>";
    }
}
?>
<h2>Modifier le nom d‚Äôun √©l√®ve</h2>
<form method="POST">
    <label for="id">ID de l‚Äô√©l√®ve :</label>
    <input type="number" name="id" required>
    <label for="id">ID de l‚Äô√©l√®ve :</label>
    <input type="number" name="id" required>
    <br>
    <label for="nom">Nouveau nom :</label>
    <input type="text" name="nom" required>
    <br>
    <input type="submit" name="modifier" value="Mettre √† jour">
</form>










fetch()	R√©cup√®re une ligne (utilisable dans une boucle)
fetchAll()	R√©cup√®re toutes les lignes
array_column()	Extrait une seule colonne d‚Äôun tableau
sort()	Trie un tableau simple
array_filter()	Filtre les √©l√©ments avec une condition
stripos()	Recherche insensible √† la casse
count()	Compte les √©l√©ments
usort()	Trie un tableau multidimensionnel
