<?php

// ============================================
// Cours Complet : Les M√©thodes Magiques en PHP
// PHP Orient√© Objet
// Fichier 100% ex√©cutable pour apprentissage
// ============================================

/**
 * üìö D√©finition :
 * 
 * En PHP, une "m√©thode magique" est une m√©thode sp√©ciale :
 * - Elle commence et finit par deux underscores (__)
 * - Elle est automatiquement appel√©e par PHP
 * - Elle r√©agit √† certains √©v√®nements sur l'objet (cr√©ation, lecture de propri√©t√©, appel de m√©thode inconnue, etc.)
 * 
 * üí¨ Elles permettent d'ajouter du comportement automatique dans ton code objet.
 */

class Magie {

    public $visible = "Je suis une propri√©t√© publique !";

    // ===========================================
    // 1. __construct() - Initialisation de l'objet
    // ===========================================
    public function __construct() {
        echo "[__construct] ‚ûú L‚Äôobjet est instanci√©.<br>";
    }

    // =====================================
    // 2. __destruct() - Nettoyage √† la fin
    // =====================================
    public function __destruct() {
        echo "[__destruct] ‚ûú L‚Äôobjet est d√©truit automatiquement.<br>";
    }

    // ==================================================
    // 3. __get() - Lecture d'une propri√©t√© inaccessible
    // ==================================================
    public function __get($propriete) {
        echo "[__get] ‚ûú La propri√©t√© '$propriete' est inaccessible ou inexistante.<br>";
    }

    // =========================================================
    // 4. __set() - Affectation d'une propri√©t√© inaccessible
    // =========================================================
    public function __set($propriete, $valeur) {
        echo "[__set] ‚ûú Vous essayez de d√©finir '$propriete' √† la valeur '$valeur'.<br>";
    }

    // ===============================================================
    // 5. __isset() - V√©rification isset() ou empty() sur propri√©t√© inaccessible
    // ===============================================================
    public function __isset($propriete) {
        echo "[__isset] ‚ûú isset() appel√© sur '$propriete'.<br>";
        return false;
    }

    // ==================================================
    // 6. __unset() - Suppression d'une propri√©t√© inaccessible
    // ==================================================
    public function __unset($propriete) {
        echo "[__unset] ‚ûú unset() appel√© sur '$propriete'.<br>";
    }

    // ==========================================
    // 7. __call() - Appel de m√©thode non d√©finie
    // ==========================================
    public function __call($nom, $arguments) {
        echo "[__call] ‚ûú M√©thode '$nom' appel√©e avec arguments : " . implode(', ', $arguments) . "<br>";
    }

    // ====================================================
    // 8. __callStatic() - Appel de m√©thode statique inconnue
    // ====================================================
    public static function __callStatic($nom, $arguments) {
        echo "[__callStatic] ‚ûú Appel statique de '$nom' avec arguments : " . implode(', ', $arguments) . "<br>";
    }

    // ================================================
    // 9. __toString() - Conversion de l‚Äôobjet en texte
    // ================================================
    public function __toString() {
        return "[__toString] ‚ûú Objet converti en texte.<br>";
    }

    // ==========================================
    // 10. __invoke() - Appeler l'objet comme une fonction
    // ==========================================
    public function __invoke($param) {
        echo "[__invoke] ‚ûú Objet appel√© comme une fonction avec argument : $param<br>";
    }

    // ===================================
    // 11. __clone() - Clonage de l'objet
    // ===================================
    public function __clone() {
        echo "[__clone] ‚ûú Clonage de l‚Äôobjet effectu√© !<br>";
    }
}

// ===============================
// ‚ú® Tests pratiques des m√©thodes
// ===============================
echo "<h2>üîÆ Test des M√©thodes Magiques</h2>";

$obj = new Magie(); // __construct est appel√© automatiquement

// __get
echo $obj->invisible; // propri√©t√© inexistante ‚ûî __get() est d√©clench√©

// __set
$obj->secret = "top secret"; // propri√©t√© inexistante ‚ûî __set() est d√©clench√©

// __isset
isset($obj->cache); // propri√©t√© inexistante ‚ûî __isset() est d√©clench√©

// __unset
unset($obj->cache); // propri√©t√© inexistante ‚ûî __unset() est d√©clench√©

// __call
$obj->lancerSort("abracadabra", 2025); // m√©thode inexistante ‚ûî __call() est d√©clench√©

// __callStatic
Magie::appelStatique("boom"); // m√©thode statique inexistante ‚ûî __callStatic() est d√©clench√©

// __toString
echo $obj; // objet converti en texte ‚ûî __toString()

// __invoke
$obj("invoqu√©"); // objet utilis√© comme une fonction ‚ûî __invoke()

// __clone
$copie = clone $obj; // clonage ‚ûî __clone()

// Fin du script : __destruct() sera appel√© automatiquement
?>
